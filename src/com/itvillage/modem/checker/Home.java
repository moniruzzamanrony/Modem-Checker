/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.itvillage.modem.checker;

import com.itvillage.modem.checker.dto.ModemInfo;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author monirozzamanroni
 */
public class Home extends javax.swing.JFrame {

    JDialog jDialog = new JDialog();
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        JPanel ui= new WaitinPanel();
        jDialog.add(ui);
        jDialog.setSize(211, 194);
        jDialog.setLocationRelativeTo(null);
        jDialog.setUndecorated(true);
        waitMgsIcon.setVisible(false);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        statusText = new javax.swing.JLabel();
        deviceModelText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        manufacturerText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        portText = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        simText = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        smsText = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        contractText = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        ussdText = new javax.swing.JLabel();
        waittingIcon = new javax.swing.JButton();
        log = new javax.swing.JLabel();
        processingLabel = new javax.swing.JLabel();
        waitMgsIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        statusPanel.setBackground(new java.awt.Color(204, 204, 255));
        statusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 153), 3));

        statusText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        statusText.setForeground(new java.awt.Color(51, 153, 0));

        deviceModelText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        deviceModelText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel4.setText("Device Model: ");

        manufacturerText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        manufacturerText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel6.setText("Manufacturer: ");

        portText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        portText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel8.setText("Used Port: ");

        simText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        simText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel10.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel10.setText("Active SIM: ");

        jLabel11.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel11.setText("SMS: ");

        smsText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        smsText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel12.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel12.setText("Contracts: ");

        contractText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        contractText.setForeground(new java.awt.Color(51, 153, 0));

        jLabel13.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel13.setText("USSD: ");

        ussdText.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        ussdText.setForeground(new java.awt.Color(51, 153, 0));

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addComponent(contractText, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 51, Short.MAX_VALUE))
                            .addComponent(smsText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ussdText, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(simText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(portText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(manufacturerText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deviceModelText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addGap(161, 161, 161)
                            .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(deviceModelText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(manufacturerText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(portText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(simText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(smsText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(contractText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(ussdText))
                .addGap(40, 40, 40))
        );

        jPanel1.add(statusPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 500, 280));

        waittingIcon.setBackground(new java.awt.Color(204, 204, 255));
        waittingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/research.png"))); // NOI18N
        waittingIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        waittingIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waittingIconActionPerformed(evt);
            }
        });
        jPanel1.add(waittingIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 34, 156, 153));

        log.setBackground(new java.awt.Color(102, 102, 0));
        log.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        log.setForeground(new java.awt.Color(204, 0, 51));
        log.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(log, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 228, 465, -1));

        processingLabel.setBackground(new java.awt.Color(102, 102, 0));
        processingLabel.setFont(new java.awt.Font("Calibri Light", 1, 36)); // NOI18N
        processingLabel.setForeground(new java.awt.Color(102, 102, 0));
        processingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        processingLabel.setText("Check Now");
        jPanel1.add(processingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 193, 465, 29));

        waitMgsIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        waitMgsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/waiting.png"))); // NOI18N
        jPanel1.add(waitMgsIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 150, 140));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void waittingIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waittingIconActionPerformed
                
        statusPanel.setBackground(new Color(204,204,255));
        deviceModelText.setText("");
        manufacturerText.setText("");
        ussdText.setText("");
        simText.setText("");
        smsText.setText("");
        portText.setText("");
        contractText.setText("");
        
        
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        waittingIcon.setEnabled(false);
                        waittingIcon.setVisible(false);
                        waitMgsIcon.setVisible(true);
                        processingLabel.setText("Processing....");
                        checkModem();
                        return null;
                    }

                    @Override
                    protected void done() {
                        System.err.println("------------------------- Process Done-------------------------");
                        waittingIcon.setEnabled(true);
                        processingLabel.setText("Result");
                        waittingIcon.setVisible(true);  
                        waitMgsIcon.setVisible(false);
                        
                    }

                };
                worker.execute();

       
    }//GEN-LAST:event_waittingIconActionPerformed


    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Home home= new Home();
                home.setVisible(true);
                Image icon = Toolkit.getDefaultToolkit().getImage("icon.png");    
                home.setIconImage(icon); 
                home.setTitle("Modem Checker");
                home.setBackground(Color.white);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel contractText;
    private javax.swing.JLabel deviceModelText;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel log;
    private javax.swing.JLabel manufacturerText;
    private javax.swing.JLabel portText;
    private javax.swing.JLabel processingLabel;
    private javax.swing.JLabel simText;
    private javax.swing.JLabel smsText;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel statusText;
    private javax.swing.JLabel ussdText;
    private javax.swing.JLabel waitMgsIcon;
    private javax.swing.JButton waittingIcon;
    // End of variables declaration//GEN-END:variables

    private void checkModem() {
        log.setText("Please Wait...");
        log.setForeground(Color.red);
        getActivePorts();

    }

    private void getActivePorts() {
        log.setText("Modem Searching...");
        List<String> ports = Modem.getActivePortsList();
        if (ports.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Modem Not Found", "Failure", JOptionPane.ERROR_MESSAGE);

        } else {

            getModemInfo(ports);

        }
    }

    private void getModemInfo(List<String> ports) {
        ModemInfo modemInfo = new ModemInfo();
        String ussdStatus = null;
        String contractsStatus = null;
        String smsStatus = null;
        int errorCount =0;
        System.err.println(ports);
        for (String port : ports) {
            log.setText(port+" is connecting...");
            Modem.connect(port);
            log.setText("Searching active SIM...");
            modemInfo.setActiveSIM(Modem.sendATCommand("AT+COPS?").replaceAll(",", "")
                    .replaceAll("OK", "").replaceAll("COPS:", "").replaceAll("\"", "").replaceAll("\\d", "").replaceAll("\\W", ""));
            
            modemInfo.setUsedPort(port);
            log.setText("Searching Device Model...");
            modemInfo.setDeviceModel(Modem.sendATCommand("AT+CGMM").split(",")[1]);
            log.setText("Searching Manufacturer Name...");
            modemInfo.setManufacturer(Modem.sendATCommand("AT+CGMI").split(",")[1]);
            log.setText("Finding SIM Name...");
            String simName = Modem.sendATCommand("AT+COPS?").replaceAll(",", "")
                    .replaceAll("OK", "").replaceAll("COPS:", "").replaceAll("\"", "").replaceAll("\\d", "").replaceAll("\\W", "");
            modemInfo.setActiveSIM(simName);
            wait(1000);
            String[] values;
            String value;
            log.setText("Testing USSD Dialer...");
            switch (simName.toLowerCase()) {
                case "banglalink":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*124#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;

                case "gp":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*566#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;
                case "grameenphone":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*566#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;
                case "robi":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*222#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;
                case "airtel":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*778#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;
                case "teletalk ":
                    value = Modem.dialUSSDCode("AT+CUSD=1,\"*152#\",15");
                    if (value.contains("")) {
                        values = value.split(",");
                        if (values.length == 3) {
                            ussdStatus = "Supported";
                        } else {
                            ussdStatus = "Not Supported";
                            errorCount++;

                        }
                    } else {
                        ussdStatus = "Not Supported";
                        errorCount++;
                    }
                    break;
                default:
                    ussdStatus = "SIM Not Found";
                    errorCount++;
                    break;

            }
            modemInfo.setCheckUssd(ussdStatus);
            log.setText("Testing Contracts List...");
            if (Modem.sendATCommand("AT+CPBR=1,99").contains("OK")) {
                contractsStatus = "Supported";
            } else {
                contractsStatus = "Not Supported";
                errorCount++;
            }
            
            modemInfo.setCheckContracts(contractsStatus);
            log.setText("Testing SMS Finder...");
            Modem.sendATCommand("AT+CMGF=1");
            wait(500);
            Modem.sendATCommand("AT+CMGF=?");
            wait(500);
            Modem.sendATCommand("AT+CPMS=\"SM\"");
            wait(500);
            if (Modem.sendATCommand("AT+CMGL=\"ALL\"").contains("OK")) {
                smsStatus = "Supported";
            } else {
                smsStatus = "Not Supported";
                errorCount++;
            }
            modemInfo.setCheckSms(smsStatus);
            Modem.disconnect();
        }
        if(errorCount == 0){
            deviceModelText.setText(modemInfo.getDeviceModel());
            deviceModelText.setForeground(Color.green);
            manufacturerText.setText(modemInfo.getManufacturer());
            manufacturerText.setForeground(Color.green);
            portText.setText(modemInfo.getUsedPort());
            portText.setForeground(Color.green);
            simText.setText(modemInfo.getActiveSIM());
            simText.setForeground(Color.green);
            smsText.setText(modemInfo.getCheckSms());
            smsText.setForeground(Color.green);
            contractText.setText(modemInfo.getCheckContracts());
            contractText.setForeground(Color.green);
            ussdText.setText(modemInfo.getCheckUssd());
            ussdText.setForeground(Color.green);
            statusPanel.setBackground(new Color(204,255,204));          
            log.setText("Modem supported");
            log.setForeground(Color.green);
            log.setText("Modem Supported");
        }
        else
        {
            deviceModelText.setText("Not Supported");
            deviceModelText.setForeground(Color.red);
            manufacturerText.setText("Not Supported");
            manufacturerText.setForeground(Color.red);
            portText.setText("Not Supported");
            portText.setForeground(Color.red);
            simText.setText("Not Supported");
            simText.setForeground(Color.red);
            smsText.setText("Not Supported");
            smsText.setForeground(Color.red);
            contractText.setText("Not Supported");
            contractText.setForeground(Color.red);
            ussdText.setText("Not Supported");
            ussdText.setForeground(Color.red);
            statusPanel.setBackground(new Color(255,204,204));
            log.setText("Modem is\'t supported");
            log.setForeground(Color.red);
        }
    }

    public void wait(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }

}
